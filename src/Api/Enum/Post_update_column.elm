-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Post_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "post"

  - Body - column name
  - Created\_at - column name
  - Date - column name
  - Id - column name
  - Iv - column name
  - Updated\_at - column name
  - User\_id - column name

-}
type Post_update_column
    = Body
    | Created_at
    | Date
    | Id
    | Iv
    | Updated_at
    | User_id


list : List Post_update_column
list =
    [ Body, Created_at, Date, Id, Iv, Updated_at, User_id ]


decoder : Decoder Post_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "body" ->
                        Decode.succeed Body

                    "created_at" ->
                        Decode.succeed Created_at

                    "date" ->
                        Decode.succeed Date

                    "id" ->
                        Decode.succeed Id

                    "iv" ->
                        Decode.succeed Iv

                    "updated_at" ->
                        Decode.succeed Updated_at

                    "user_id" ->
                        Decode.succeed User_id

                    _ ->
                        Decode.fail ("Invalid Post_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Post_update_column -> String
toString enum =
    case enum of
        Body ->
            "body"

        Created_at ->
            "created_at"

        Date ->
            "date"

        Id ->
            "id"

        Iv ->
            "iv"

        Updated_at ->
            "updated_at"

        User_id ->
            "user_id"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Post_update_column
fromString enumString =
    case enumString of
        "body" ->
            Just Body

        "created_at" ->
            Just Created_at

        "date" ->
            Just Date

        "id" ->
            Just Id

        "iv" ->
            Just Iv

        "updated_at" ->
            Just Updated_at

        "user_id" ->
            Just User_id

        _ ->
            Nothing
